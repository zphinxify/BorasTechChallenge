@page "/"
@using MoveM8s.Data.Models;
@using MoveM8s.Data.Services;

@inject ActivityService ActivityService
@inject NavigationManager NavManager

<PageTitle>Välkommen</PageTitle>

<h1 class="title">Kul att du hittat hit!</h1>

<p>Det här är det perfekta verktyget för dig som <em>vill</em> göra nåt, men kanske behöver hjälp med inspirationen. Och precis som en tv-kock har vi förberett lite här och kommer med ett förslag direkt!</p>

<ActivityTemplate SuggestedActivity="suggestedActivity" />

<h3>Inte det du letade efter? Eller har du speciella behov?</h3>
<p>Ingen fara på taket, vi har fler förslag i rockärmen!</p>
<button class="btn-primary btn-green" type="button" @onclick="@(() => NavManager.NavigateTo("/shuffle"))">Fler förslag</button>

<div class="checkboxes">
    <label>
        <input type="checkbox" @bind="needsAccessability" /> Tillgänglighetsanpassat
    </label>
    <label>
        <input type="checkbox" @bind="isChildFriendly" /> Barnanpassat
    </label>
</div>



@code {
    private bool shuffled = false;
    private Activity? suggestedActivity = null;
    private IEnumerable<Activity> _activities;
    private bool needsAccessability;
    private bool isChildFriendly;

    protected override async Task OnInitializedAsync()
    {
        _activities = await ActivityService.GetAllActivitiesAsync();
    }

    protected override void OnParametersSet()
    {
        if (!shuffled && _activities.Any())
        {
            ShuffleActivities(needsAccessability, isChildFriendly);
        }
    }

    private void ShuffleActivities(bool isAccessable, bool isChildFriendly)
    { 
        Random R = new Random();
        int someRandomNumber = R.Next(0, _activities.Count() - 1);
      
        suggestedActivity = _activities.ElementAt(someRandomNumber);
    }
}