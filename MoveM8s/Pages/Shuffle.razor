@page "/shuffle"
@using MoveM8s.Data.Dtos;
@using MoveM8s.Data.Models;
@using MoveM8s.Data.Services;
@using System.Timers;
@using MoveM8s.Data;

@inject ActivityService ActivityService
@inject WeatherForecastService WeatherService; 

<h3>Shuffle</h3>

<div>
    @if (_forecasts.Any(x => Convert.ToDouble(x.TemperatureC) > 20) && !string.IsNullOrEmpty(activityName))
    {
        <div class="weather-suggestion">
            <h5>@ActivityType(_suggestedActivityWeather.Properties.ActivityType, true)</h5>
            <p>Tips! Idag ska det vara soligt och över 20 grader, får vi föreslå ett besök på <strong>@activityName</strong>?</p>
        </div>
    }
    <div>Slå tärningen för att få fler eminenta förslag</div>
    <img src="/img/dice-1294902_1280.png" @onclick="() => ShuffleActivities()" height="200px" class="@bounce" />
    @*<button class="btn btn-primary btn-green" @onclick="ShuffleActivities">Ge förslag</button>*@
    <div class="chip-container">
        @foreach (var theme in _selectedThemes)
        {
            <FilterChip Theme="@theme" OnClickCallback="Remove" />
        }
        @foreach (var type in _selectedTypes)
        {
            <FilterChip Theme="@ActivityType(type)" OnClickCallback="Remove" />
        }
    </div>

    <button class="btn btn-primary btn-light-green" @onclick=@(() => showList = !showList)>Filtrera</button>
    <ul class="filter-list list-unstyled @(showList ? "" : "visually-hidden")">
        <li class="text-danger" @onclick:preventDefault style="background-color: lightblue;">Lekparksteman</li>
        @foreach (var theme in _availableThemes.Where(x => !_selectedThemes.Contains(x)))
        {
            <li @onclick="() => AddTheme(theme)">@theme</li>
        }
        <li class="text-danger" @onclick:preventDefault style="background-color: lightblue;">Aktivitetstyper</li>
        @foreach(var type in _activities.Where(x => !string.IsNullOrEmpty(x.Properties.ActivityType) && !_selectedTypes.Contains(x.Properties.ActivityType)).Select(x => x.Properties.ActivityType).Distinct())
        {
            <li @onclick="() => AddType(type)">@ActivityType(type)</li>
        }
    </ul>
    <div class="checkboxes">
        <label>
            <input type="checkbox" @bind="needsAccessability" /> Tillgänglighetsanpassat
        </label>
        <label>
            <input type="checkbox" @bind="isChildFriendly" /> Barnanpassat
        </label>
    </div>

    @if (_suggestedActivity != null && string.IsNullOrEmpty(bounce))
    {
        <ActivityTemplate SuggestedActivity=_suggestedActivity />
    }

</div>

@code {
    private string activityName
    {
        get
        {
            if (_suggestedActivityWeather != null)
            {
                return string.IsNullOrEmpty(_suggestedActivityWeather.Properties.Name) ? _suggestedActivityWeather.Properties.Namn : _suggestedActivityWeather.Properties.Name;
            }

            return "";
        }
    }
    private static Timer timer;
    private string bounce = "";
    private bool showList = false;
    private Activity _suggestedActivity = null;
    private Activity _suggestedActivityWeather = null;
    private IEnumerable<Activity> _activities = new List<Activity>();
    private bool needsAccessability;
    private bool isChildFriendly;

    public IEnumerable<string> _selectedThemes = new List<string>();
    public IEnumerable<string> _availableThemes = new List<string>();
    public IEnumerable<string> _selectedTypes = new List<string>();
    public IEnumerable<WeatherForecastResponseDto> _forecasts = new List<WeatherForecastResponseDto>();
    //public Dictionary<string, IEnumerable<string>> _visibleThemes => _availableThemes.Where(x => x.Value.FirstOrDefault(y => _selectedThemes.Contains(y)) == null).SelectMany(x => x.Value);


    protected override async Task OnInitializedAsync()
    {
        timer = new Timer(1000);
        timer.Elapsed += OnBounced;
        timer.AutoReset = false;

        _activities = await ActivityService.GetAllActivitiesAsync();
        PopulateFilters();
        _forecasts = await WeatherService.GetForecastAsync("12.9470", "57.7203");
        _forecasts = _forecasts.Where(x => x.Time >= DateTime.Now && x.Time < DateTime.Now.AddHours(5));
        if (_forecasts.Any())
        {
            ShuffleActivities("swimmingarea");
        }
    }

    private void ShuffleActivities(string type = "")
    {
        timer.Stop();
        timer.Start();
        var filtered = _activities;
        if(_selectedThemes.Any())
        {
            filtered = _activities.Where(x => _selectedThemes.Contains(x.Properties.Theme));
        }
        if (_selectedTypes.Any())
        {
            filtered = filtered.Concat(_activities.Where(x => _selectedTypes.Contains(x.Properties.ActivityType)));
        }
        if (needsAccessability || isChildFriendly)
        {
            filtered = filtered.Where(x => x.Properties.Accessibility != null && (bool)x.Properties.Accessibility);
        }

        Random R = new Random();
        if (!string.IsNullOrEmpty(type))
        {
            filtered = _activities.Where(x => x.Properties.ActivityType == "swimmingarea" || x.Properties.ActivityType == "park");
            if (needsAccessability || isChildFriendly)
            {
                filtered = filtered.Where(x => x.Properties.Accessibility != null && (bool)x.Properties.Accessibility);
            }
            int randomNumber = R.Next(0, filtered.Count() - 1);

            _suggestedActivityWeather = filtered.ElementAt(randomNumber);
            return;
        }

        int someRandomNumber = R.Next(0, filtered.Count() - 1);

        _suggestedActivity = filtered.ElementAt(someRandomNumber);

        showList = false;
        bounce = "bounce";
        StateHasChanged();
    }

    private void OnBounced(Object source, ElapsedEventArgs e)
    {
        InvokeAsync(() =>
        {
            bounce = "";
            StateHasChanged();
        });
    }

    private void PopulateFilters()
    {
        var yolo = _activities.GroupBy(x => x.Properties.ActivityType).Select(group => new
        {
            GroupName = group.Key,
            Filters = group.Where(x => x.Properties.Theme != null).ToList()
        });

        //_availableThemes = _activities.GroupBy(x => x.Properties.ActivityType).ToDictionary(x => x.Key, x => x.Where(x => x.Properties.Theme != null).Select(y => y.Properties.Theme).Distinct());
        _availableThemes = _activities.Where(x => x.Properties.Theme != null)
                                      .Select(x => x.Properties.Theme)
                                      .Distinct();
    }

    private string ActivityType(string type, bool singular = false)
    {
        switch (type)
        {
            case "park":
                return singular ? "Park" : "Parker";
            case "playground":
                return singular ? "Lekplats" : "Lekplatser";
            case "bathhouse":
                return "Badhus";
            case "swimmingarea":
                return singular ? "Badplats" : "Badplatser";
            default:
                return "";
        }
    }

    private string ActivityTypeTranslation(string type)
    {
        switch (type)
        {
            case "Parker":
                return "park";
            case "Lekplatser":
                return "playground";
            case "Badhus":
                return "bathhouse";
            case "Badplatser":
                return "swimmingarea";
            default:
                return "";
        }
    }

    private void Remove(string themeOrType)
    {
        if (_selectedThemes.Contains(themeOrType))
        {
            _selectedThemes = _selectedThemes.Where(x => x != themeOrType);
        }
        if(_selectedTypes.Contains(ActivityTypeTranslation(themeOrType)))
        {
            _selectedTypes = _selectedTypes.Where(x => x != ActivityTypeTranslation(themeOrType));
        }
    }

    private void AddTheme(string theme)
    {
        if (!_selectedThemes.Contains(theme))
        {
            _selectedThemes = _selectedThemes.Concat(new string[] { theme });
        }
    }

    private void AddType(string type)
    {
        if (!_selectedTypes.Contains(type))
        {
            _selectedTypes = _selectedTypes.Concat(new string[] { type });
        }
    }
}
